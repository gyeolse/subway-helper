{"version":3,"sources":["components/Train.js","components/Home.js","components/Detail.js","App.js","reportWebVitals.js","index.js"],"names":["Train","statnNm","trainNo","trainSttus","statnTnm","updnLine","directAt","subwayNm","TableRow","TableCell","component","scope","to","pathname","state","align","Home","useState","result","setresult","line","setline","isLineChecked","setisLineChecked","url","a","alert","axios","get","then","res","data","realtimePositionList","console","log","catch","err","className","FormControl","InputLabel","id","Select","labelId","value","onChange","e","target","map","hosun","MenuItem","Button","onClick","TableContainer","Paper","Table","TableHead","TableBody","trainData","trainStatus","rowNum","Detail","location","resultMessages","setresultMessages","isCheckValue","setisCheckValue","etcbox","setetcbox","setisSelectTmp","setisSelectMask","setisSelectDestroy","setisSelectOrder","setisSelectEtc","makeFalse","callCenterNum","confirmCallCenter","testUrl","meessageurl","href","variant","color","TextField","label","multiline","rows","fullWidth","defaultValue","FinalMessage","App","path","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fb58d23c.chunk.js","sourcesContent":["import { Paper, TableContainer } from \"@material-ui/core\";\r\nimport { Table, TableRow, TableCell } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Train({\r\n  statnNm,\r\n  trainNo,\r\n  trainSttus,\r\n  statnTnm,\r\n  updnLine,\r\n  directAt,\r\n  subwayNm,\r\n}) {\r\n  const Test = () => {\r\n    console.log(trainSttus);\r\n  };\r\n\r\n  return (\r\n    <TableRow>\r\n      <TableCell component=\"th\" scope=\"row\">\r\n        <Link\r\n          to={{\r\n            pathname: `/report/${trainNo}`,\r\n            state: {\r\n              statnNm,\r\n              trainNo,\r\n              trainSttus,\r\n              statnTnm,\r\n              updnLine,\r\n              directAt,\r\n              subwayNm,\r\n            },\r\n          }}\r\n        >\r\n          {statnNm}\r\n        </Link>\r\n      </TableCell>\r\n      <TableCell>{trainNo}</TableCell>\r\n      <TableCell align=\"middle\">{trainSttus}</TableCell>\r\n      <TableCell align=\"middle\">{statnTnm}</TableCell>\r\n      <TableCell align=\"middle\">\r\n        {updnLine === 0 ? \"상행 \" : \"하행 \"} {directAt === 1 ? \"급행 \" : \" \"}{\" \"}\r\n      </TableCell>\r\n    </TableRow>\r\n  );\r\n}\r\n\r\nconst style = {\r\n  container: {\r\n    marginRight: 8,\r\n  },\r\n};\r\n\r\nexport default Train;\r\n","import React from \"react\";\r\nimport { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { CONFIG_KEY } from \"../config/Key\";\r\nimport Train from \"./Train\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { useInView } from \"react-intersection-observer\";\r\n\r\nimport {\r\n  FormControl,\r\n  Select,\r\n  InputLabel,\r\n  MenuItem,\r\n  TableContainer,\r\n  Paper,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableRow,\r\n  Table,\r\n} from \"@material-ui/core\";\r\n\r\nconst Home = () => {\r\n  //호선 번호\r\n  let lineNumber = [\r\n    { id: 1, value: \"1\" },\r\n    { id: 2, value: \"2\" },\r\n    { id: 3, value: \"3\" },\r\n    { id: 4, value: \"4\" },\r\n    { id: 5, value: \"5\" },\r\n    { id: 6, value: \"6\" },\r\n    { id: 7, value: \"7\" },\r\n    { id: 8, value: \"8\" },\r\n    { id: 9, value: \"9\" },\r\n  ];\r\n\r\n  const [result, setresult] = useState([]);\r\n  const [line, setline] = useState(0);\r\n  const [isLineChecked, setisLineChecked] = useState(false);\r\n  const [startNum, setstartNum] = useState(0);\r\n  const [endNum, setendNum] = useState(10);\r\n\r\n  const _infiniteScroll = () => {\r\n    let scrollHeight = Math.max(\r\n      document.documentElement.scrollHeight,\r\n      document.body.scrollHeight\r\n    );\r\n    let scrollTop = Math.max(\r\n      document.documentElement.scrollTop,\r\n      document.body.scrollTop\r\n    );\r\n\r\n    let clientHeight = document.documentElement.clientHeight;\r\n\r\n    if (scrollTop + clientHeight === scrollHeight) {\r\n      setstartNum(startNum + 10);\r\n      setendNum(endNum + 10);\r\n    }\r\n  };\r\n\r\n  const checkTrainStatus = (trainStatus) => {\r\n    // console.log(trainStatus);\r\n\r\n    if (trainStatus == \"0\" || trainStatus == 0) {\r\n      return \"진입\";\r\n    } else if (trainStatus == \"1\" || trainStatus == 1) {\r\n      return \"도착\";\r\n    } else {\r\n      return \"출발\";\r\n    }\r\n  };\r\n\r\n  const url =\r\n    \"http://swopenapi.seoul.go.kr/api/subway/\" +\r\n    CONFIG_KEY +\r\n    \"/json/realtimePosition/0/50/\" +\r\n    line +\r\n    \"호선\";\r\n\r\n  async function buttonClickListener() {\r\n    //1. 호선 체크 확인\r\n    if (line == 0) {\r\n      alert(\"호선을 입력해주세요\");\r\n      return;\r\n    }\r\n\r\n    //2. 데이터가 담겨있는지 확인\r\n    if (result != null) {\r\n      setresult([]);\r\n    }\r\n\r\n    await axios\r\n      .get(url)\r\n      .then(function (res) {\r\n        setresult(res.data.realtimePositionList);\r\n        console.log(res);\r\n      })\r\n      .catch(function (err) {\r\n        console.log(err);\r\n      });\r\n    setisLineChecked(true);\r\n  }\r\n\r\n  //호선 value 확인\r\n  const lineChange = (e) => {\r\n    if (e.target.value >= 10) {\r\n      alert(\"맞는 호선을 입력해주십시오\");\r\n    } else {\r\n      setline(e.target.value);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div>\r\n        <h1>SUBWAY - TEST PAGE</h1>\r\n        <FormControl>\r\n          <InputLabel id=\"demo-simple-select-label\">호선</InputLabel>\r\n          <Select\r\n            labelId=\"demo-simple-select-label\"\r\n            id=\"demo-simple-select\"\r\n            value={line}\r\n            onChange={lineChange}\r\n          >\r\n            {lineNumber.map((hosun) => {\r\n              return (\r\n                <MenuItem key={hosun.id} value={hosun.value}>\r\n                  {hosun.value}호선\r\n                </MenuItem>\r\n              );\r\n            })}\r\n          </Select>\r\n        </FormControl>\r\n        {/* <input type=\"number\" name=\"line\" onChange={lineChange} /> */}\r\n\r\n        <Button onClick={buttonClickListener}>열차 검색</Button>\r\n      </div>\r\n      {/* {result.map((train) => {\r\n          {\r\n            console.log(train);\r\n            return <h1>{train.statnNm}</h1>;\r\n          }\r\n        })} */}\r\n\r\n      {isLineChecked == true ? (\r\n        <TableContainer component={Paper}>\r\n          <Table>\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell>현재 위치</TableCell>\r\n                <TableCell>열차 번호</TableCell>\r\n                <TableCell>진입 상태</TableCell>\r\n                <TableCell>종점</TableCell>\r\n                <TableCell>상/하행</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {result.map((trainData) => (\r\n                // statnNm, trainNo, trainStatus, statnTnm, updnLine, directAt\r\n                <Train\r\n                  key={trainData.rowNum}\r\n                  statnNm={trainData.statnNm}\r\n                  trainNo={trainData.trainNo}\r\n                  trainSttus={checkTrainStatus(trainData.trainSttus)}\r\n                  statnTnm={trainData.statnTnm}\r\n                  updnLine={trainData.updnLine}\r\n                  directAt={trainData.directAt}\r\n                  subwayNm={trainData.subwayNm}\r\n                />\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      ) : (\r\n        <></>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, TextField } from \"@material-ui/core\";\r\nimport { isBrowser, isMobile } from \"react-device-detect\";\r\n\r\nfunction Detail({ location }) {\r\n  //props variables\r\n  // let directAt = location.state.directAt == 1 ? \"급행\" : \" \"; //급행여부\r\n  let statnNm = location.state.statnNm; //현재 위치\r\n  let statnTnm = location.state.statnTnm; //종점\r\n  let trainNo = location.state.trainNo; //열차번호\r\n  let trainSttus = location.state.trainSttus; //열차상태 (도착/진입/출발)\r\n  let updnLine = location.state.updnLine == 0 ? \"상행\" : \"하행\";\r\n  let subwayNm = location.state.subwayNm;\r\n\r\n  // final variables\r\n  const [resultMessages, setresultMessages] = useState(\"\");\r\n  const [isCheckValue, setisCheckValue] = useState(false);\r\n  const [etcbox, setetcbox] = useState(false);\r\n  const [callCenter, setcallCenter] = useState(\"\");\r\n\r\n  // check the variables value\r\n  const [isSelectTemp, setisSelectTmp] = useState(false); //온도\r\n  const [isSelectMask, setisSelectMask] = useState(false); //마스크 미착용\r\n  const [isSelectDestroy, setisSelectDestroy] = useState(false); //시설물 파괴\r\n  const [isSelectOrder, setisSelectOrder] = useState(false); //질서저해\r\n  const [isSelectEtc, setisSelectEtc] = useState(false);\r\n\r\n  // 다른 변수를 체크했을 때, 나머지를 모두, false로 세팅해주는 함수 필요.\r\n  const makeFalse = () => {\r\n    setisSelectDestroy(false);\r\n    setisSelectMask(false);\r\n    setisSelectDestroy(false);\r\n    setisSelectOrder(false);\r\n    setisSelectEtc(false);\r\n\r\n    setisCheckValue(false);\r\n    setetcbox(false);\r\n  };\r\n\r\n  // Button click Listener\r\n  const tempClickListener = () => {\r\n    makeFalse(); // 모두 false로 설정\r\n    setisSelectTmp(true); // 해당 temp 만 true로 설정\r\n    setresultMessages(\"온도에 문제가 있습니다. \"); //결과 메시지 설정\r\n    setisCheckValue(true);\r\n  };\r\n\r\n  const maskClickListener = () => {\r\n    makeFalse();\r\n    setisSelectMask(true);\r\n    setresultMessages(\"마스크를 쓰지 않은 사람이 있습니다. \");\r\n    setisCheckValue(true);\r\n  };\r\n\r\n  const destroyClickListener = () => {\r\n    makeFalse();\r\n    setisSelectDestroy(true);\r\n    setresultMessages(\"시설물 고장이 있습니다. \");\r\n    setisCheckValue(true);\r\n  };\r\n\r\n  const orderClickListener = () => {\r\n    makeFalse();\r\n    setisSelectMask(true);\r\n    setresultMessages(\"질서 저해하는 사람이 탑승하고 있습니다. \");\r\n    setisCheckValue(true);\r\n  };\r\n\r\n  const etcClickListener = () => {\r\n    makeFalse();\r\n    setisSelectEtc(true);\r\n    if (etcbox == false) {\r\n      setetcbox(true);\r\n    } else {\r\n      setetcbox(false);\r\n    }\r\n    setisCheckValue(true);\r\n  };\r\n\r\n  const sendSMSListener = () => {\r\n    //Message 만들기\r\n    let FinalMessage =\r\n      //Mobile 화면만 지원하도록 설정\r\n      // if (isMobile) {\r\n      //   alert(\"고객센터로 SMS 전송합니다.\");\r\n      // } else if (isBrowser) {\r\n      //   alert(\"현재 PC 화면은 지원하지 않습니다.\");\r\n      // } else {\r\n      //   alert(\"기타 브라우저는 지원하지 않습니다.\");\r\n      // }\r\n\r\n      alert(\"고객센터로 SMS 전송합니다. \");\r\n    console.log(FinalMessage);\r\n  };\r\n\r\n  // 그 외 functions\r\n  //etc message 변화 함수\r\n  const messageChange = (e) => {\r\n    setresultMessages(e.target.value);\r\n  };\r\n\r\n  //콜센터 세팅\r\n  const confirmCallCenter = (subwayNm) => {\r\n    // 추후 수정 필요. 역별로 다름.\r\n    if (\r\n      subwayNm == \"1호선\" ||\r\n      subwayNm == \"2호선\" ||\r\n      subwayNm == \"3호선\" ||\r\n      subwayNm == \"4호선\"\r\n    ) {\r\n      return \"15771234\";\r\n    } else {\r\n      return \"15447769\";\r\n    }\r\n  };\r\n\r\n  let makeSMSMessage = () => {\r\n    return (\r\n      statnNm +\r\n      \"에\" +\r\n      trainSttus +\r\n      \"중인\" +\r\n      trainNo +\r\n      \"에서 민원신고합니다. \" +\r\n      \"사유 : 마스크 미착용\"\r\n    );\r\n  };\r\n\r\n  //callcenter 확인\r\n  let callCenterNum = confirmCallCenter(subwayNm);\r\n\r\n  let testUrl = \"sms:\" + \"enter the phone number\" + \"&body=\" + makeSMSMessage();\r\n  let meessageurl =\r\n    \"sms:\" +\r\n    callCenterNum +\r\n    \"&body=\" +\r\n    resultMessages +\r\n    \" 빠른 조치 부탁드립니다. \";\r\n  return (\r\n    <div>\r\n      <h2>\r\n        현재 위치 {statnNm}에 {trainSttus} 하는 중이에요.\r\n      </h2>\r\n      <h2>\r\n        열차 번호는 {trainNo} 이에요. 종점은 {statnTnm} 이에요.{\" \"}\r\n      </h2>\r\n\r\n      <h3>불편 사항을 선택해주세요. </h3>\r\n\r\n      <div>{/* 온도 높/낮, 마스크 미착용, 시설물 파괴,  */}</div>\r\n      {console.log(location.state)}\r\n\r\n      <a href={testUrl}>체 크</a>\r\n      <div>\r\n        <Button variant=\"contained\" color=\"primary\" onClick={tempClickListener}>\r\n          온도\r\n        </Button>\r\n        <Button variant=\"contained\" color=\"primary\" onClick={maskClickListener}>\r\n          마스크\r\n        </Button>\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          onClick={orderClickListener}\r\n        >\r\n          질서저해\r\n        </Button>\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          onClick={destroyClickListener}\r\n        >\r\n          시설물 파괴\r\n        </Button>\r\n        <Button variant=\"contained\" color=\"primary\" onClick={etcClickListener}>\r\n          기타\r\n        </Button>\r\n      </div>\r\n\r\n      {etcbox == true ? (\r\n        <TextField\r\n          label=\"내용\"\r\n          multiline\r\n          rows={3}\r\n          fullWidth=\"contained\"\r\n          defaultValue=\"내용을 입력해주세요.\"\r\n          onChange={messageChange}\r\n        />\r\n      ) : (\r\n        \"\"\r\n      )}\r\n\r\n      <div>\r\n        {isCheckValue == true ? (\r\n          <h3>최종적으로 {resultMessages} 라고 전송할게요.</h3>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n\r\n      {/* <form>\r\n        <input type=\"text\" name=\"message\" onChange={messageChange} />\r\n        <button type=\"submit\">문자 메시지 전송</button>\r\n      </form> */}\r\n\r\n      <Button\r\n        fullWidth\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        href={meessageurl}\r\n        onClick={sendSMSListener}\r\n      >\r\n        SMS로 전송하기\r\n      </Button>\r\n\r\n      <Link\r\n        to={{\r\n          pathname: `/#`,\r\n        }}\r\n      >\r\n        홈으로 이동\r\n      </Link>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Detail;\r\n","import \"./App.css\";\nimport { Route, HashRouter } from \"react-router-dom\";\nimport Home from \"./components/Home\";\nimport Detail from \"./components/Detail\";\n\nfunction App() {\n  return (\n    <HashRouter>\n      <Route path=\"/\" exact={true} component={Home} />\n      <Route path=\"/report/:trainNo\" component={Detail} />\n    </HashRouter>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}